'' =================================================================================================
''
''   File....... nextion_ez_p2.spin2
''   Purpose....
''   Author..... Charles Current

''   E-mail..... charles@charlescurrent.com
''   Started.... 17 JUN 2022
''   Updated.... 18 JUN 2022
''
'' =================================================================================================
{{
  A simple demonstration of how to use the nextion_ez_p2 object with the Nextion display
}}

CON
        _clkfreq = 180_000_000

        NX_TX_PIN = 0
        NX_RX_PIN = 1
        NX_BAUD = 9_600

        DB_TX_PIN = 62
        DB_RX_PIN = 63
        DB_BAUD = 115_200

        CR = $0D

VAR
  long  nx_cmd
  long  nx_sub
  long  currentPage
  long  lastPage
  long  disp_value
  long  run_count
  byte  txt[256]

OBJ
  nextion       : "nextion_ez"
  serial        : "jm_fullduplexserial"

PUB main()
  waitct(clkfreq + getct())
  serial.start(DB_RX_PIN, DB_TX_PIN, %0000, DB_BAUD)
  nextion.start(NX_RX_PIN, NX_TX_PIN, NX_BAUD)

  repeat
    waitct(clkfreq / 25 + getct())

    if nextion.getCurrentPage() <> currentPage
      lastPage := nextion.getLastPage()
      currentPage := nextion.getCurrentPage()

      'data to serial terminal to demonstrate what is returned
      serial.Str(STRING("currentPage = "))
      serial.hex(currentPage)
      serial.Tx(CR)
      serial.Str(STRING("lastPage = "))
      serial.hex(lastPage)
      serial.Tx(CR)
      serial.Str(STRING("dp = "))
      serial.hex(nextion.readNum(STRING("dp")))
      serial.Tx(CR)

    nextion.listen()
    if nextion.cmdAvail() > 0
      nx_cmd := nextion.getCmd()

      'data to serial terminal to demonstrate what is returned
      serial.Str(STRING("nextion command = "))
      serial.hex(nx_cmd)
      serial.Tx(CR)

      callCommand(nx_cmd)

    if run_count == true
      disp_value++
      nextion.writeNum(STRING("x0.val"), disp_value)
      nextion.writeNum(STRING("n0.val"), disp_value)

PRI callCommand(_cmd)           'parse the 1st command byte and decide how to proceed
  case _cmd
    "T" :                                               'standard Easy Nextion Library commands start with "T"
      nx_sub := nextion.readByte()                     ' so we need the second byte to know what function to call

      'data to serial terminal to demonstrate what is returned
      serial.Str(STRING("nextion subcommand = "))
      serial.hex(nx_sub)
      serial.Tx(CR)

      callTrigger(nx_sub)

PRI callTrigger(_triggerId)     'use the 2nd command byte from nextion and call associated function

  case _triggerId
    $00 :
      trigger00()
    $01 :
      trigger01()
    $02 :
      trigger02()
    $03 :
      trigger03()
    $04 :
      trigger04()

PRI trigger00()
  nextion.sendCmd(STRING("page 1"))

PRI trigger01()
  nextion.sendCmd(STRING("page 0"))

PRI trigger02()
  run_count := NOT run_count
  if run_count
    nextion.writeStr(STRING("t0.txt"), STRING("Running"))
  else
    nextion.writeStr(STRING("t0.txt"), STRING("Stopped"))
  nextion.readStr(STRING("t0.txt"), @txt)

  'data to serial terminal to demonstrate what is returned
  serial.str(STRING("t0.txt = "))
  serial.str(@txt)
  serial.tx(CR)

PRI trigger03() | slidder, wave, guage
  slidder := nextion.readNum(STRING("h0.val"))
  guage := slidder * 36 / 10
  wave := slidder * 255 / 100

  nextion.writeNum(STRING("j0.val"), slidder)
  nextion.writeNum(STRING("z0.val"), guage)
  nextion.addWave(1, 0, wave)

  'data to serial terminal to demonstrate what is returned
  serial.str(STRING("h0.val = "))
  serial.hex(slidder)
  serial.tx(CR)

PRI trigger04()
  waitct(clkfreq / 25 + getct())
  trigger03()