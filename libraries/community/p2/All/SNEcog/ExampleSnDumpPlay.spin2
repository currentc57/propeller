'
' A minimalistic VGM dump player.

CON
    _CLKFREQ = 250_000_000

    SPEED_DIV = 1

    rightPin = 49
    leftPin  = 48

VAR
  long waitFor,readptr
  long database,dataptr
  long loopptr,loopleft,looplength
  byte buffer[64]

OBJ
  SN : "SNEcog"

PUB Main() | continue, i, cmd
  SN.start(rightPin, leftPin, true)    ' Start SNcog

  SN.setFreq(2,0)


  '"Handle" vgm header ((mostly)ignore it)

  readptr := @thevgm+long[@thevgm+$34]+$34
  loopptr := @thevgm+long[@thevgm+$1C]
  if loopptr
    loopptr += $1C
  looplength := long[@thevgm+$20]
  loopleft := looplength

  ' Below is a somewhat minimalistic implementation of the ".vgm" format
  ' Have a look at the .vgm file format documentation for a better understanding
  waitFor := getct() + 10_000_000
  repeat

    continue := true
    repeat while continue

      ifnot loopleft
        if loopptr and looplength
          loopleft := looplength
          readptr := loopptr

      getn(@buffer, 1)            ' Read a command byte
      cmd := buffer[0]
      case cmd
        $50:             ' PSG write
          getn(@buffer, 1)          ' Read the regsiter value from sd
          SN.setRegister(buffer[0])     ' Write the value to SNEcog

        $52,$53:          ' OPN2 write
          getn(@buffer, 2) ' reg value and address
          i := buffer[0]
          if cmd == $53
            i+=256
          'SN.setOPN2Register(i,buffer[1])


        $80..$8F:     ' Data bank DAC write + wait
          'SN.setOPN2Register($2A,byte[database][dataptr++])
          if cmd <> $80
            waitSamples(cmd & 15)
            continue := false

        $70..$7F:     ' Wait a short amount of time
          waitSamples((cmd & 15)+1)
          continue := false


        $61:         ' Wait an arbitrary amount of time
          getn(@buffer, 2)
          waitSamples(buffer[0] | (buffer[1]<<8))
          continue := false

        $62:         ' Wait 1/60 of a second
          waitSamples(735)
          continue := false

        $63:         ' Wait 1/50 of a second
          waitSamples(882)
          continue := false

        $E0: ' data bank seek (NYI)
           getn(@buffer, 4)
           dataptr:= long[@buffer]

        $67: ' data bank init
           getn(@buffer,6)
           if buffer[1] == 0
             database:=readptr
             dataptr:=0
             readptr+=long[@buffer+2]


        $66:
          if loopleft
            return


    waitct(waitFor)                  ' Wait until the right time to
    SN.flipRegisters()                  ' Update the SN registers

PRI waitSamples(n) | ct
  if readptr >= loopptr
    loopleft -= n
  waitFor += ((_CLKFREQ/44100*SPEED_DIV) * (n) ) #> 50
  ct:= getct()
  if waitFor-ct < 100
    waitfor := getct() + 100


PRI getn(buf,n)
  bytemove(buf,readptr,n)
  readptr+=n

DAT

thevgm file "Ending.vgm"