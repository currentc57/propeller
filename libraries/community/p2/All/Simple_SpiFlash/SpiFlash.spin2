'' simple SPI flash memory driver
' uses no cog, no streamer, no speed optimizations
' currently hardcoded to boot ROM pins

' tested to work with the following flash ICs:
' Winbond W25Q80DV
' Issi IS25LP080D
' Amic A25L080M
' ON LE25V40
' Adesto ST25SF041

' author: Nicolas Benezan (nicolas@benezan.de, forum: ManAtWork)

' bene 07-May-2020 Spi_WrLong() fixed (little endian)
' bene 09-Jul-2020 Spi_RdByte() fixed, waitx
' bene 14-Oct-2021 smart pin synchronous serial mode instead of bit banging

' It is assumed that the flash chip supports at least 50MHz SPI clock.
' However, the actual SPI clock is sysclock/8 max. because the delay of the 
' smart pin IO flipflops causes trouble at sysclock/6 and higher.
' That would require special case handling.


CON     spi_cs = 61
        spi_ck = 60
        spi_di = 59 ' P2 -> flash
        spi_do = 58 ' flash -> P2

        modeCLK = P_TRANSITION + P_OE + P_INVERT_OUTPUT     ' SPI_CK
        modeTXD = P_SYNC_TX + P_OE |((spi_ck - spi_di) & %111)<<24 ' + P_SYNC_IO + P_FILT0_AB
        modeRXD = P_SYNC_RX |((spi_ck - spi_do) & %111)<<24

        Write_Enable = $06
        Erase_4k     = $20
        Erase_64k    = $D8
        Write_Page   = $02
        Read_Data    = $03
        Read_Status  = $05

PUB start() ' Dummy to avoid compiling as top
  Spi_Init()
  Spi_Cmd8 (Write_Enable)
  pinh (spi_cs)
  repeat

PUB Erase(flashAdr, size) | cmd
' size can be 4kB or 64kB
  cmd:= Erase_4k
  if size > $1000
    cmd:= Erase_64k
  Spi_Init()
  Spi_Cmd8 (Write_Enable)
  Spi_Cmd32 (cmd, flashAdr)
  Spi_Wait()

PUB WritePage(hubAdr, flashAdr)
' writes a page of 256 bytes
  Spi_Init()
  Spi_Cmd8(Write_Enable)
  Spi_Cmd32(Write_Page, flashAdr)
  repeat 64
    Spi_Wr4Bytes (long[hubAdr])
    hubAdr+= 4
  Spi_Wait()

PUB Read (hubAdr, flashAdr, size)
' read any number of bytes
  Spi_Init ()
  Spi_Cmd32 (Read_Data, flashAdr)
  repeat size
    byte[hubAdr++]:= Spi_RdByte ()
  pinh (spi_cs)
  
PUB Verify(hubAdr, flashAdr, size) : ok
' compare HUBRAM to flash contents, true means match
  ok:= true
  Spi_Init()
  Spi_Cmd32(Read_Data, flashAdr)
  repeat size
    ok&= byte[hubAdr++] == Spi_RdByte()
  pinh (spi_cs)
  return ok

PRI Spi_Init() | div
  div:= (clkfreq / 100_000_000) #> 4                   ' adjust smart pin base period to actual frequency
  ORG
                fltl    #spi_di                        ' reset smart pins
                fltl    #spi_do
                wrpin   ##modeClk,#spi_ck              ' smart pin transition mode
                wrpin   ##modeTXD,#spi_di              ' smart pin synchronous serial transmit
                wrpin   ##modeRXD,#spi_do              ' smart pin synchronous serial receive
                wxpin   div,#spi_ck                    ' clock transition base period
                drvl    #spi_ck                        ' enable smart pin
  END

PRI Spi_Cmd8(cmd)
' outputs 8 bits command, MSB first
  ORG
                drvh    #spi_cs
                shl     cmd,#24                        ' shift command up
                rev     cmd
                drvl    #spi_cs
                wxpin   #$27,#spi_di                   ' 8 bits, start/stop mode
                wypin   cmd,#spi_di
                drvl    #spi_di                        ' enable TX smart pin
                wypin   #16,#spi_ck                    ' start CLK sequence (16 transitions = 8 pulses)
                nop
.waitRdy        testp   #spi_ck wz                     ' IN=1 if smart pin ready
        if_nz   jmp     #.waitRdy                      ' wait until last CLK sequence finished
  END

PRI Spi_Cmd32(cmd, adr)
' outputs 4 bytes: 8 bit command + 24 bits adr
  ORG
                drvh    #spi_cs
                shl     cmd,#24                 'shift command up
                or      cmd,adr                 'or in address
                drvl    #spi_cs
  END
  Spi_WrLong(cmd)

PRI Spi_WrLong(data)
' outputs 32 bits (MSB first) while spi_cs stays low
  ORG
                rev     data
                wxpin   #$3f,#spi_di                   ' 32 bits, start/stop mode
                wypin   data,#spi_di
                drvl    #spi_di                        ' enable TX smart pin
                wypin   #64,#spi_ck                    ' start CLK sequence (64 transitions = 32 pulses)
                nop
.waitRdy        testp   #spi_ck wz                     ' IN=1 if smart pin ready
        if_nz   jmp     #.waitRdy                      ' wait until last CLK sequence finished
  END

PRI Spi_Wr4Bytes(data)
' same as WrLong() but LSB first (little endian)
  ORG
                movbyts data,#%00_01_10_11
  END
  Spi_WrLong(data)
  
PRI Spi_RdByte (): data
' read 8 bits
  ORG
                wxpin   #$27,#spi_do                   ' 8 bits, with hold time
                drvl    #spi_do                        ' enable RX smart pin
                fltl    #spi_di
                'waitx   divCLK                        ' setup time before first rising edge
                wypin   #16,#spi_ck                    ' start 16 clock transitions
.waitDone       testp   #spi_do   wz                   ' IN=1 if smart pin ready
        if_nz   jmp     #.waitDone                     ' wait until CLK sequence finished
                rdpin   data,#spi_do
                rev     data
                zerox   data,#7                        ' limit to 8 bits
  END


PRI Spi_Wait() | st
' waits until busy flag == 0, drives spi_cs high when done
  repeat
    Spi_Cmd8(Read_Status)
    st:= Spi_RdByte()
  until st & $01 == 0
  pinh (spi_cs)

{
+------------------------------------------------------------------------------------------------------------------------------+
¦                                                   TERMS OF USE: MIT License                                                  ¦                                                            
+------------------------------------------------------------------------------------------------------------------------------¦
¦Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation    ¦ 
¦files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,    ¦
¦modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software¦
¦is furnished to do so, subject to the following conditions:                                                                   ¦
¦                                                                                                                              ¦
¦The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.¦
¦                                                                                                                              ¦
¦THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE          ¦
¦WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR         ¦
¦COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,   ¦
¦ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                         ¦
+------------------------------------------------------------------------------------------------------------------------------+
}
