{{
  MAX7219 Dot Matrix MCU 8x32 LED Display Module
  Author: Greg LaPolla
  E-Mail: glapolla@gmail.com
  Copyright (c) 2021 Greg LaPolla
  See end of file for terms of use

  This object is based on the arduino LedControl by Eberhard Fahle

}}

CON

  CLK_FREQ = 200_000_000                                        ' system freq as a constant

  _clkfreq = CLK_FREQ                                           ' set system clock

  OP_NOOP        = 0
  OP_DIGIT0      = 1
  OP_DIGIT1      = 2
  OP_DIGIT2      = 3
  OP_DIGIT3      = 4
  OP_DIGIT4      = 5
  OP_DIGIT5      = 6
  OP_DIGIT6      = 7
  OP_DIGIT7      = 8
  OP_DECODEMODE  = 9
  OP_INTENSITY   = 10
  OP_SCANLIMIT   = 11
  OP_SHUTDOWN    = 12
  OP_DISPLAYTEST = 15

  BITS = 8

VAR

  long  SPI_MOSI, SPI_CLK, SPI_CS
  long  maxDevices
  byte status[64]
  byte spidata[16]

PUB null()

' not a top file

PUB start(dpin, cspin, clkpin, numDevices) | i

  SPI_MOSI := dpin
  SPI_CLK  := clkpin
  SPI_CS   := cspin

  if (numDevices <= 0 || numDevices > 8 )
    numDevices := 8

  maxDevices := numDevices

  pinl(SPI_MOSI)
  pinl(SPI_CLK)
  pinh(SPI_CS)

  i := 0
  repeat while i < 64
    status[i] := $00
    i++

  i := 0
  repeat while i < maxdevices

    spiTransfer(i,OP_DISPLAYTEST,0)
    'scanlimit is set to max on startup
    setScanLimit(i,7)
    'decode is done in source
    spiTransfer(i,OP_DECODEMODE,0)
    clearDisplay(i)
    'we go into shutdown-mode on startup
    shutdown(i,true)
    i++

PUB getDeviceCount(): result                                ' Gets number of devices attached
  return result := maxDevices

PUB shutdown(addr, b)                                       ' Set shutdown (power saving) mode
  if(addr<0 || addr>=maxDevices)
    return

  if(b)
    spiTransfer(addr, OP_SHUTDOWN,0)
  else
    spiTransfer(addr, OP_SHUTDOWN,1)

PUB setScanLimit(addr, limit)                               ' Limit number of digits to display
  if(addr<0 || addr>=maxDevices)
    return

  if(limit>=0 && limit<8)
    spiTransfer(addr, OP_SCANLIMIT,limit)

PUB setIntensity(addr, intensity)                           ' Adjust the brightness
  if(addr<0 || addr>=maxDevices)
    return

  if(intensity>=0 && intensity<16)
    spiTransfer(addr, OP_INTENSITY,intensity)

PUB clearDisplay(addr) | offset, i                          ' Switch all led's on teh device off
  if(addr<0 || addr>=maxDevices)
    return

  offset := addr*8
  i := 0
  repeat while i < 8
    status[offset+i] := 0
    spiTransfer(addr, i+1,status[offset+i])
    i++

PUB setLed(addr, row, column, state) | byte val, offset     ' Set status of a single led on/off

  val := $00

  if(addr<0 || addr>=maxDevices)
    return

  if(row<0 || row>7 || column<0 || column>7)
    return

  offset := addr * 8
  val := %10000000 >> column

  if(state)
    status[offset+row] := status[offset+row]|val
  else
    val := !val
    status[offset+row] := status[offset+row]&val

  spiTransfer(addr, row+1, status[offset+row])

PUB setRow(addr, row, value) | offset                        ' Set all 8 leds of a row on or off
  if(addr<0 || addr>=maxDevices)
    return

  if(row<0 || row>7)
    return

  offset := addr * 8
  status[offset+row] := value
  spiTransfer(addr, row+1,status[offset+row])

PUB setColumn(addr, col, value) | byte val, row             ' Set all 8 leds of a column on or off
  if(addr < 0 || addr >= maxDevices)
    return

  if(col < 0 || col > 7)
    return

  row := 0
  repeat while row < 8
    val := value >> (7 - row)
    val := val & $01
    setLed(addr, row, col, val)
    row++

PUB setDigit(addr, digit, value, dp) | v, offset            ' Display a hexadecimal digit on a 7 segment
  if(addr < 0 || addr >= maxDevices)
    return

  if(digit < 0 || digit > 7 || value > 15)
    return

  offset := addr * 8
  v := charTable[value]
  if(dp)
    v|=%10000000

  status[offset + digit] := v
  spiTransfer(addr, digit + 1, v)

PUB setChar(addr, digit, value, dp) | offset, index, v       ' Display a character on a 7 segemnt display
  if(addr < 0 || addr >= maxDevices)
    return

  if(digit < 0 || digit > 7)
    return

  offset := addr * 8
  index := value
  if(index > 127)
    'no defined beyond index 127, so we use the space char
    index := 32

  v := charTable[index]

  if(dp)
    v|=%10000000

  status[offset + digit] := v
  spiTransfer(addr, digit + 1, v)

PRI spiTransfer(addr, opcode, data) | i, maxbytes, offset, count

  ' Create an array with the data to shift out
  offset := addr * 2
  maxbytes := maxDevices * 2

  i := 0
  repeat while i < maxbytes
    spidata[i] := byte[0]
    i++

  'put our device data into the array
  spidata[offset + 1] := opcode
  spidata[offset] := data

  'enable the line
  pinl(SPI_CS)

  'Now shift out the data
  i := maxbytes
  repeat while i > 0
    shiftout(spidata[i - 1])
    i--

  'latch the data onto the display
  pinh(SPI_CS)

PRI shiftout (data)

    data ror = BITS                         ' pre-align MSB

    repeat BITS                             ' 8 bit packets
      pinw(SPI_MOSI, data ROL = 1)          ' write out a bit
      pinh(SPI_CLK)                         ' toggle clk high
      waitus(1)
      pinl(SPI_CLK)                         ' toggle clk low
      waitus(1)

DAT

charTable byte %01111110,%00110000,%01101101,%01111001,%00110011,%01011011,%01011111,%01110000
          byte %01111111,%01111011,%01110111,%00011111,%00001101,%00111101,%01001111,%01000111
          byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
          byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
          byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
          byte %00000000,%00000000,%00000000,%00000000,%10000000,%00000001,%10000000,%00000000
          byte %01111110,%00110000,%01101101,%01111001,%00110011,%01011011,%01011111,%01110000
          byte %01111111,%01111011,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
          byte %00000000,%01110111,%00011111,%00001101,%00111101,%01001111,%01000111,%00000000
          byte %00110111,%00000000,%00000000,%00000000,%00001110,%00000000,%00000000,%00000000
          byte %01100111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
          byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00001000
          byte %00000000,%01110111,%00011111,%00001101,%00111101,%01001111,%01000111,%00000000
          byte %00110111,%00000000,%00000000,%00000000,%00001110,%00000000,%00010101,%00011101
          byte %01100111,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000
          byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000,%00000000

con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}