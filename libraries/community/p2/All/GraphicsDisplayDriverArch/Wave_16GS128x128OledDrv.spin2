{{
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
__________               __           /\
\______   \ ____   ____ |  | _____.__.)/_____
 |    |  _// __ \ /    \|  |/ <   |  |/  ___/
 |    |   \  ___/|   |  \    < \___  |\___ \
 |______  /\___  >___|  /__|_ \/ ____/____  >
        \/     \/     \/     \/\/         \/    Wave_16GS128x128OledDrv
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 Version 0.6
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 Driver for the 1.5inch 128x128 16 grayscale OLED display from Waveshare with a SSD1327 driver
 and SPI interface.
 ( see http://www.waveshare.com/1.5inch-oled-module.htm )

 To be done:
   * finish the double buffering code
   * when Graphics.spin2 is switched to general ARGB color scheme, the pixel function needs
     to do the conversion into grayscale values.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
}}


CON
  BUFFER_SIZE = 8192
  BITS_PER_PIXEL = 4
  X_RES = 128
  X_MAX = 127
  Y_RES = 128
  Y_MAX = 127

  GREY_0 = $000000
  GREY_1 = $101010
  GREY_2 = $202020
  GREY_3 = $303030
  GREY_4 = $404040
  GREY_5 = $505050
  GREY_6 = $606060
  GREY_7 = $707070
  GREY_8 = $808080
  GREY_9 = $909090
  GREY_A = $A0A0A0
  GREY_B = $B0B0B0
  GREY_C = $C0C0C0
  GREY_D = $D0D0D0
  GREY_E = $E0E0E0
  GREY_F = $F0F0F0

CON
  SPI_CS_OFS   = 2
  SPI_DOUT_OFS = 0
  SPI_CLK_OFS  = 1
  SPI_DC_OFS   = 3
  SPI_RST_OFS  = 4


OBJ
  scm : "pasmSMC"


VAR
  ' number of buffers
  ' 0: not yet initialized
  ' 1: only one buffer for painting and writing
  ' 2: double buffers ->
  '       sb_paint can be used to paint next screen
  '       sb_write can be sent to the display
  byte buffers

  sb_paint
  sb_write

  SPI_BASE, SPI_CS, SPI_DOUT, SPI_CLK, SPI_DC, SPI_RST


DAT
display_header
pixPasm long long 0
setClip long long 0
sizeX   word word 128
sizeY   word word 128


PUB setup( base_pin ) | cnt, bidx
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   Function to initialize driver and display. So, it should reset
   the display and do whatever is needed to initialize it for
   operation.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  ' remember the pins
  SPI_BASE:= base_pin
  SPI_CS  := SPI_BASE+ SPI_CS_OFS
  SPI_DOUT:= SPI_BASE+ SPI_DOUT_OFS
  SPI_CLK := SPI_BASE+ SPI_CLK_OFS
  SPI_DC  := SPI_BASE+ SPI_DC_OFS
  SPI_RST := SPI_BASE+ SPI_RST_OFS

  ' initialize the pins
  pinh( SPI_CS )
  pinh( SPI_DC )
  pinl( SPI_DOUT )
  pinl( SPI_CLK )
  pinl( SPI_RST )
  waitms( 10 )
  pinh( SPI_RST )

  ' and initialize the display
  'repeat cnt from 0 to 52
  '  writeSPICommand( ws_init[cnt] )
  ' and initialize the display
  bidx:=0
  repeat 20
    cnt:=ws_init[ bidx++ ]
    writeSPICommand( ws_init[ bidx++ ] )
    if cnt>1
      repeat cnt-1
        writeSPICommand( ws_init[ bidx++ ] )

  setClip:=@setClipping


PUB addScreenBuffer( adr )
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
  ( should be independent of the display used )
    Currently the dirver works with one or two screen buffers.
    sb_paint is pointing to the buffer that is used in the
    graphics functions.
    sb_write is pointing to the buffer which can be send to the
    display.
    Adding one buffer means that only one buffer is used.
    Adding another buffer means, that
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  case_fast buffers
    0:
      sb_paint:=adr
      sb_write:=adr
      buffers++
    1:
      sb_paint:=adr
      buffers++
    2:
      sb_paint:=adr


PUB switchBuffer() | tmp
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   Simply switches the pointers for double buffering.
   ( Creating next screen can be done while current screen is
     send to the display. )
   As an example, one COG would be using the graphics functions
   which access the buffer pointed to by sb_paint.
   Another COG could constantly run the screen update code, using
   the sb_write buffer.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  ' missing: if the write buffer is currently used, wait
  tmp:=sb_write
  sb_write:=sb_paint
  sb_paint:=tmp


DAT
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    This is the PASM code that stays in COG-RAM for usage from
    within the graphics functions in Graphics.spin2.

    The function uses/changes PR0-PR3.

    Input parameters:
      * PR0 : X coordinate of the pixel
      * PR1 : Y coordinate of the pixel
      * PR2 : color of the pixel
    Additionally used PR registers:
      * PR3 : calculating the address in the display buffer, which
              is currently active for painting

    Being a greyscale display with 16 colors, each byte in the
    screen buffer actually stores 2 pixels. So the hardware
    dependent code below has to modify the right nibble.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

pixpas  WORD 0,ppend-ppstart-1
  org
ppstart
            rdlong PR3, bufadr
            ' check that the coordinate is in window
xmax        cmps   PR0, #X_RES-1 WCZ
ymax if_le  cmps   PR1, #Y_RES-1 WCZ
     if_gt  ret

xmin        cmps   PR0, #0 WCZ
ymin if_ge  cmps   PR1, #0 WCZ
     if_lt  ret

            ' easy color conversion from RGB to grayscale
            shr    PR2, #4
            mov    PR4, PR2
            xor    PR5, PR5
            and    PR4, #$ff
            add    PR5, PR4
            mov    PR4, PR2
            shr    PR4, #8
            and    PR4, #$ff
            add    PR5, PR4
            mov    PR4, PR2
            shr    PR4, #16
            and    PR4, #$ff
            add    PR5, PR4
            qdiv   PR5, #3
            getqx  PR2

            ror    PR0, #1 WC
            add    PR3, PR0
            shl    PR1, #6
            add    PR3, PR1
            rdbyte PR0, PR3
     if_c   and    PR0, #$f0
     if_nc  and    PR0, #$0f
            and    PR2, #$0f
     if_nc  shl    PR2, #4
            or     PR0, PR2
            wrbyte PR0, PR3
            ret
bufadr      long   0
ppend


PUB loadPixelPASM( cog_end ):adr | ad
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   This one loads the pixel routine above into the "end" of the
   COG-RAM and returns the COG-RAM address to be used in calls
   of functions in the Graphics-object.
   cog_end is the last address which can be used, so for the
   first call it is $130 (see regload description)
   The function returns it's call address, which in turn can be
   used as the "end" of other COG-routines.

   As the PASM2 code is not loaded to a fixed address, the
   register addresses used inside of the PASM2 code need to be
   changed before regload. So, if you use other variables than
   PR0-PR7 you have to call scm.setRelSource or scm.setDestination
   functions.

   Example from above:
   ppstart
              rdlong PR3, bufadr
              ....
   bufadr     long   0
   ppend

   The PASM2 code is compiled with an ORG having no dedicated
   address, so it will start with 0. In the end the PASM2 code
   is loaded to addres $130-size. So, the bufadr compiled into
   the rdlong instruction is off and has to be corrected.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  ' prepare the pointer telling regload where to load the code to
  pixpas[0]:= cog_end - (@ppend>>2) + (@ppstart>>2) - 2

  ' add startadress to references
  'debug( "128x128" )
  scm.setRelSource( @ppstart, pixpas[0], @ppstart, @bufadr )

  ' let the PASM code know where the write buffer variable is
  bufadr:=@sb_paint
  regload( @pixpas )
  pixPasm:=pixpas[0]
  return @display_header


PUB setClipping( xmi, xma, ymi, yma ) | sourcebp
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   The pixel function checks the validity of coordinates.
   Initially the pixel code contains the min and max values as
   given in the constants.
   If clipping changes, this code has to reload the pixel setting
   code with the new min and max coordinates.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  ' safety-net .. does not allow to set boundary outside of
  ' coordinates, as the pixel routine could then write in
  ' memory areas outside of the buffer
  if xmi<0
    xmi:=0
  if xma>=X_RES
    xma:=X_MAX
  if ymi<0
    ymi:=0
  if yma>=Y_RES
    yma:=Y_MAX

  scm.setSource( @xmax, xma )
  scm.setSource( @ymax, yma )
  scm.setSource( @xmin, xmi )
  scm.setSource( @ymin, ymi )
  regload( @pixpas )


PUB getPixel( a, x,y ):col | adr
{{ Not yet ready to be added to other drivers }}

  if a<>0
    adr:=a
  else
    adr:=sb_paint
  org
            mov    PR0, x
            ror    PR0, #1 WC
            add    adr, PR0
            mov    PR0, y
            shl    PR0, #6
            add    adr, PR0
            rdbyte PR0, adr
     if_nc  and    PR0, #$f0
     if_c   and    PR0, #$0f
     if_nc  shr    PR0, #4
  end
  return PR0


PUB cogWriteBuffer()
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   This one would simply wait for a change in the sp_write
   variable and send the whole screen-buffer content to the
   display, if the variable is changed. So, this can be loaded
   into a COG.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}


PUB writeBuffer(adr, bytes) | buf,sck,sdo,scs,sdc,b
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   Write buffer is called by the main program. If there are no
   high frequency display updates needed, it is feasible to run
   this together with the graphics functions and together with
   main code in the same COG.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  if adr<>0
    buf:=adr
  else
    buf:=sb_write

  sck:=1<<SPI_CLK
  sdo:=1<<SPI_DOUT
  scs:=1<<SPI_CS
  sdc:=1<<SPI_DC

  pinl( SPI_CS )

  org
            ' assume the display needs some time after setting CS to low
            ' without NOPs it does not work.
            nop
            nop
            nop

loop        rdbyte b, buf
            shl    b, #24
            add    buf,#1

            rep    #7,#8
            shl    b, #1 WC
            andn   OUTA,sck

     IF_C   or     OUTA,sdo
     IF_NC  andn   OUTA,sdo

            waitx  #0
            or     OUTA,sck
            waitx  #0

            sub    bytes, #1 WZ
     IF_NZ  jmp    #loop

  end
  pinh( SPI_CS )


PRI writeSPI(b)
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Here is a block of helper functions, needed to implement the
    SPI functions understood by the display.
    Might be ported to PASM2 if needed.
    Making it an object of it's own needs to be investigated.
    The next display driver I did, did not work with this SPI
    bus protocol and the working driver for the other display did
    not work with this display.
    On the other hand it is only worth the efford, if more than
    one display shall be used in a project.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  waitus(2)
  pinl( SPI_CS )
  waitus(2)
  repeat 8
    pinl( SPI_CLK )
    if b & $80
      pinh( SPI_DOUT )
    else
      pinl( SPI_DOUT )
    b<<=1
    pinh( SPI_CLK )
  pinl( SPI_CLK )
  pinh( SPI_CS )
  pinh( SPI_DC )
  pinl( SPI_DOUT )

PRI writeSPIData(b)
  pinh( SPI_DC )
  writeSPI(b)


PRI writeSPICommand(b)
  pinl( SPI_DC )
  writeSPI(b)

DAT
{{ =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
   Some data needed by the initialization.

   Setting the grayscale levels is very elementary to have a
   balanced grayscale.
   =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= }}

  ws_init     byte 1, $AE            ' turn off
              byte 3, $15, $00, $3F
              byte 3, $75, $00, $7F
              byte 2, $81, $a0       ' Contrast
              byte 2, $A0, $53
              byte 2, $A1, $00
              byte 2, $A2, $00
              byte 1, $A4
              byte 2, $A8, $7F
              byte 2, $B1, $11
              '             these are the levels of the different grayscale colors
              byte 16, $B8, $02, $04, $08, $0c, $10, $14, $18, $1c, $20, $24, $28, $2c, $30, $34, $78
              byte 2, $B3, $00
              byte 2, $AB, $01
              byte 2, $B6, $04
              byte 2, $BE, $0F
              byte 2, $BC, $08
              byte 2, $D5, $62
              byte 2, $FD, $12
              byte 2, $a0, $51
              byte 1, $af            ' turn on


dat

{{
  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}

